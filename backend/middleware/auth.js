
// backend/middleware/auth.js
const admin = require('firebase-admin');
const { findUserByUID, createUserWithTrial } = require('../db');

/**
 * Middleware para verificar o token de autentica√ß√£o do Firebase
 * e checar o status premium do usu√°rio.
 */
async function checkAuthAndPremium(req, res, next) {
    const idToken = req.headers.authorization?.split('Bearer ')[1];

    if (!idToken) {
        return res.status(401).json({ error: 'Acesso n√£o autorizado. Token n√£o fornecido.' });
    }

    try {
        // 1. Verifica o token do Firebase
        const decodedToken = await admin.auth().verifyIdToken(idToken);
        const uid = decodedToken.uid;

        // 2. Busca o usu√°rio no Firestore; se n√£o existir, cria automaticamente (auto-provisioning)
        let user = await findUserByUID(uid);
        if (!user) {
            console.log('‚ö†Ô∏è  Usu√°rio n√£o encontrado. Criando perfil trial automaticamente:', uid);
            try {
                user = await createUserWithTrial(uid, { email: decodedToken.email, name: decodedToken.name });
                console.log('‚úÖ Perfil trial criado on-demand.');
            } catch (createErr) {
                console.error('‚ùå Falha ao criar perfil trial automaticamente:', createErr);
                return res.status(500).json({ error: 'Falha ao criar perfil do usu√°rio.' });
            }
        }

        // 3. Anexa o usu√°rio ao objeto da requisi√ß√£o para uso posterior
        req.user = user;

        // MODO DE TESTE: Libera o acesso se a vari√°vel de ambiente estiver configurada
        if (process.env.ACCESS_CONTROL_MODE === 'open') {
            console.log(`AVISO: Servidor em modo de teste 'open'. Acesso liberado para o usu√°rio: ${user.uid}`);
            return next();
        }

        // 4. Verifica o status premium
        const premiumStatus = user.premium.status;
        const trialEndDate = user.premium.trialEndDate.toDate(); // Converte Timestamp para Date

        const isTrialActive = premiumStatus === 'TRIAL' && new Date() < trialEndDate;
        const isPremiumActive = premiumStatus === 'ACTIVE';

        if (isTrialActive || isPremiumActive) {
            // Se o trial est√° ativo ou o plano premium est√° pago, permite o acesso.
            return next();
        }

        // 5. Se nenhuma condi√ß√£o for atendida, bloqueia o acesso.
        // Retorna um status espec√≠fico para o frontend saber que precisa de pagamento.
        return res.status(403).json({
            error: 'Acesso premium necess√°rio.',
            premiumStatus: 'INACTIVE'
        });

    } catch (error) {
        console.error('Erro de autentica√ß√£o ou verifica√ß√£o premium:', error);
        if (error.code === 'auth/id-token-expired') {
            return res.status(401).json({ error: 'Token expirado. Por favor, fa√ßa login novamente.' });
        }
        return res.status(500).json({ error: 'Erro interno no servidor.' });
    }
}

/**
 * Middleware para verificar o token de autentica√ß√£o do Firebase
 * e anexar os dados do usu√°rio do Firestore √† requisi√ß√£o (req.user).
 * N√£o bloqueia o acesso com base no status premium.
 */
async function checkAuth(req, res, next) {
    console.log('üîí CheckAuth middleware called for:', req.method, req.path);
    const idToken = req.headers.authorization?.split('Bearer ')[1];

    if (!idToken) {
        console.log('‚ùå No authorization token provided');
        return res.status(401).json({ error: 'Acesso n√£o autorizado. Token n√£o fornecido.' });
    }

    try {
        console.log('üîç Verifying Firebase token...');
        // 1. Verifica o token do Firebase
        const decodedToken = await admin.auth().verifyIdToken(idToken);
        const uid = decodedToken.uid;
        console.log('‚úÖ Firebase token verified for user:', uid);

        // 2. Busca o usu√°rio no Firestore
        console.log('üìÇ Fetching user from database...');
        const user = await findUserByUID(uid);
        if (!user) {
            console.log('‚ùå User not found in database for UID:', uid);
            return res.status(404).json({ error: 'Usu√°rio n√£o encontrado no banco de dados.' });
        }

        console.log('‚úÖ User found in database:', {
            uid: user.uid,
            email: user.email,
            premiumStatus: user.premium?.status
        });

        // 3. Anexa o usu√°rio ao objeto da requisi√ß√£o para uso posterior
        req.user = user;
        return next();

    } catch (error) {
        console.error('‚ùå Authentication error:', error);
        if (error.code === 'auth/id-token-expired') {
            return res.status(401).json({ error: 'Token expirado. Por favor, fa√ßa login novamente.' });
        }
        return res.status(500).json({ error: 'Erro interno no servidor.' });
    }
}

module.exports = { checkAuthAndPremium, checkAuth };
