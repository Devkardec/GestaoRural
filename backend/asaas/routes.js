// backend/asaas/routes.js
const express = require('express');
const router = express.Router();
const { createCustomer, createSubscription } = require('./asaasClient');
const { findUserByUID, updateUser } = require('../db');
const { checkAuthAndPremium, checkAuth } = require('../middleware/auth');
const admin = require('firebase-admin');

// Rota para o usu√°rio logado iniciar o processo de assinatura premium.
router.post('/subscription', async (req, res) => {
    // O token do usu√°rio ser√° verificado pelo Firebase Auth no frontend
    // e o UID ser√° enviado no corpo da requisi√ß√£o.
    const { uid, name, email, cpfCnpj, phone, subscriptionPlan } = req.body;

    if (!uid) {
        return res.status(400).json({ error: 'UID do usu√°rio √© obrigat√≥rio.' });
    }

    try {
        let user = await findUserByUID(uid);
        if (!user) {
            return res.status(404).json({ error: 'Usu√°rio n√£o encontrado.' });
        }

        let asaasCustomerId = user.asaasCustomerId;

        // 1. Cria o cliente no Asaas se ele ainda n√£o existir
        if (!asaasCustomerId) {
            console.log(`Criando cliente no Asaas para o usu√°rio: ${uid}`);
            const customer = await createCustomer({ name, email, cpfCnpj, phone });
            asaasCustomerId = customer.id;
            await updateUser(uid, { asaasCustomerId }); // Salva o ID do cliente no nosso DB
        }

        // 2. Cria a assinatura no Asaas
        console.log(`Criando assinatura para o cliente Asaas: ${asaasCustomerId}`);
        const subscription = await createSubscription({
            customer: asaasCustomerId,
            value: subscriptionPlan.value, // Ex: 59.90
            description: subscriptionPlan.description, // Ex: "Plano Premium - AgroCultive"
            cycle: subscriptionPlan.cycle || 'MONTHLY' // Permite anual (YEARLY)
        });

        // 3. Atualiza nosso banco de dados com os detalhes da assinatura
        await updateUser(uid, {
            'premium.subscriptionId': subscription.id,
            'premium.paymentLink': subscription.paymentLink
        });

        // 4. Retorna o link de pagamento para o frontend
        res.status(200).json({ paymentLink: subscription.paymentLink });

    } catch (error) {
        console.error('Erro ao criar processo de assinatura:', error);
        res.status(500).json({ error: 'Falha ao processar a assinatura.' });
    }
});

// Preflight expl√≠cito para status (camada adicional de compatibilidade)
router.options('/status', (req,res)=> {
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Vary','Origin');
    res.header('Access-Control-Allow-Methods','GET,OPTIONS');
    res.header('Access-Control-Allow-Headers','Origin, X-Requested-With, Content-Type, Accept, Authorization');
    return res.sendStatus(200);
});

// Rota para o frontend verificar o status do usu√°rio.
// Protegida pelo middleware `checkAuth` para garantir que apenas o usu√°rio logado possa ver seu pr√≥prio status.
router.get('/status', checkAuth, async (req, res) => {
    const user = req.user || {};
    console.log('üéØ Status route accessed by user:', user.uid);

    try {
        if (!user.premium) {
            console.warn('‚ö†Ô∏è Usu√°rio sem objeto premium ‚Äì retornando default TRIAL.');
            return res.status(200).json({
                premiumStatus: 'TRIAL',
                trialEndDate: new Date(Date.now() + 7*24*60*60*1000),
                daysRemaining: 7,
                autoGenerated: true
            });
        }

        const trialEndDate = user.premium.trialEndDate?.toDate ? user.premium.trialEndDate.toDate() : new Date();
        const now = new Date();
        let status = user.premium.status || 'TRIAL';
        let daysRemaining = Math.ceil((trialEndDate - now) / 86400000);

        if (status === 'TRIAL' && daysRemaining < 0) {
            status = 'INACTIVE';
            daysRemaining = 0;
            try {
                await updateUser(user.id || user.uid, {
                    'premium.status': status,
                    'premium.lastUpdate': new Date()
                });
                console.log(`‚è≥ Trial expirado. Usu√°rio ${user.uid} marcado como INACTIVE.`);
            } catch (uErr) {
                console.warn('N√£o foi poss√≠vel atualizar status expirado agora:', uErr.message);
            }
        }

        const payload = {
            premiumStatus: status,
            trialEndDate,
            daysRemaining: daysRemaining < 0 ? 0 : daysRemaining,
            paymentLink: user?.premium?.paymentLink || null,
            subscriptionId: user?.premium?.subscriptionId || null
        };
        console.log('üìä Status payload:', payload);
        return res.status(200).json(payload);
    } catch (err) {
        console.error('‚ùå Error sending status response:', err);
        return res.status(500).json({ error: 'Erro interno ao buscar status.' });
    }
});

// Endpoint de depura√ß√£o (remover em produ√ß√£o se necess√°rio)
router.get('/debug/status', checkAuth, (req, res) => {
    const user = req.user || {};
    res.json({
        uid: user.uid,
        premium: user.premium || null,
        hasPremium: !!user.premium
    });
});

// Exemplo de uma rota protegida pelo middleware
router.get('/premium-feature', checkAuthAndPremium, (req, res) => {
    // Gra√ßas ao middleware, sabemos que req.user existe e tem acesso.
    res.status(200).json({
        message: `Bem-vindo ao recurso premium, ${req.user.name}! Seu status √© ${req.user.premium.status}.`
    });
});

// Rota para obter o link de pagamento existente (se j√° criado)
router.get('/payment-link', checkAuth, async (req, res) => {
    try {
        const user = req.user;
        if (user?.premium?.paymentLink) {
            return res.json({
                paymentLink: user.premium.paymentLink,
                premiumStatus: user.premium.status || 'TRIAL'
            });
        }
        return res.status(404).json({ error: 'Link de pagamento n√£o encontrado.' });
    } catch (e) {
        console.error('Erro em /asaas/payment-link:', e);
        return res.status(500).json({ error: 'Falha ao obter link de pagamento.' });
    }
});

// Rota consolidada de perfil Asaas/Premium
router.get('/me', checkAuth, async (req, res) => {
    try {
        const u = req.user;
        const trialEndDate = u?.premium?.trialEndDate?.toDate ? u.premium.trialEndDate.toDate() : null;
        const now = new Date();
        let status = u?.premium?.status || 'TRIAL';
        let daysRemaining = 0;
        if (trialEndDate) {
            daysRemaining = Math.ceil((trialEndDate - now)/86400000);
            if (status === 'TRIAL' && daysRemaining < 0) {
                status = 'INACTIVE';
                daysRemaining = 0;
            }
        }
        return res.json({
            uid: u.uid,
            email: u.email || null,
            premiumStatus: status,
            daysRemaining: daysRemaining < 0 ? 0 : daysRemaining,
            trialEndDate,
            paymentLink: u?.premium?.paymentLink || null,
            subscriptionId: u?.premium?.subscriptionId || null,
            asaasCustomerId: u?.asaasCustomerId || null
        });
    } catch (e) {
        console.error('Erro em /asaas/me:', e);
        return res.status(500).json({ error: 'Falha ao obter perfil.' });
    }
});

module.exports = router;

/**
 * ROTA DE SIMULA√á√ÉO (ambiente de desenvolvimento):
 * POST /asaas/simulate-payment { uid: '...' }
 * Promove o usu√°rio para ACTIVE como se tivesse recebido PAYMENT_CONFIRMED.
 * (N√£o usar em produ√ß√£o)
 */
if (process.env.NODE_ENV !== 'production') {
    router.post('/simulate-payment', async (req, res) => {
        try {
            const { uid } = req.body || {};
            if (!uid) return res.status(400).json({ error: 'uid √© obrigat√≥rio' });
            let user = await findUserByUID(uid);
            if (!user) return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
            const farFuture = new Date();
            farFuture.setFullYear(farFuture.getFullYear() + 1);
            await updateUser(uid, {
                'premium.status': 'ACTIVE',
                'premium.trialEndDate': admin.firestore.Timestamp.fromDate(farFuture),
                'premium.lastUpdate': new Date()
            });
            return res.json({ message: 'Simula√ß√£o aplicada: ACTIVE', uid, until: farFuture.toISOString() });
        } catch (e) {
            console.error('Erro em /asaas/simulate-payment:', e);
            return res.status(500).json({ error: 'Falha na simula√ß√£o.' });
        }
    });
}